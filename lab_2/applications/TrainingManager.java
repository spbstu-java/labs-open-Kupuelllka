package lab_2.applications;

import java.lang.reflect.Method;
import java.util.Scanner;

import lab_2.classes.HeroTraining;
import lab_2.classes.Repeat;

public class TrainingManager {
    
    public static void startTraining(HeroTraining hero) {
        System.out.println("üêâ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≥–µ—Ä–æ—è " + hero.getHeroName() + "! üêâ");
        hero.showStats();
        
        invokeAnnotatedMethods(hero);
        
        System.out.println("üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        hero.showStats();
        
        if (hero.isReadyForBattle()) {
            System.out.println("üéâ " + hero.getHeroName() + " –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ —Å –¥—Ä–∞–∫–æ–Ω–æ–º!");
        } else {
            System.out.println("‚ö†Ô∏è  –ù—É–∂–Ω–æ –µ—â–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!");
        }
    }
    
    private static void invokeAnnotatedMethods(Object obj) {
        Class<?> clazz = obj.getClass();
        Method[] methods = clazz.getDeclaredMethods();
        
        for (Method method : methods) {
            if (method.isAnnotationPresent(Repeat.class)) {
                Repeat repeat = method.getAnnotation(Repeat.class);
                int times = repeat.value();
                
                method.setAccessible(true);
                
                System.out.println("\n‚ö° –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: " + method.getName() + " (–ø–æ–≤—Ç–æ—Ä–æ–≤: " + times + ")");
                
                for (int i = 0; i < times; i++) {
                    try {
                        Object[] parameters = createTrainingParameters(method.getParameterTypes(), i + 1);
                        method.invoke(obj, parameters);
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
                        Thread.sleep(500);
                    } catch (Exception e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: " + e.getMessage());
                    }
                }
            }
        }
    }
    
    private static Object[] createTrainingParameters(Class<?>[] parameterTypes, int attempt) {
        Object[] parameters = new Object[parameterTypes.length];
        
        for (int i = 0; i < parameterTypes.length; i++) {
            parameters[i] = getTrainingValue(parameterTypes[i], attempt);
        }
        
        return parameters;
    }
    
    private static Object getTrainingValue(Class<?> type, int attempt) {
        if (type == int.class || type == Integer.class) {
            return attempt * 5 + 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        } else if (type == double.class || type == Double.class) {
            return attempt * 10.5 + 20.0;
        } else if (type == boolean.class || type == Boolean.class) {
            return attempt % 2 == 0;
        } else if (type == String.class) {
            String[] spells = {"–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", "–õ–µ–¥—è–Ω–∞—è —Å—Ç—Ä–µ–ª–∞", "–ú–æ–ª–Ω–∏—è", "–ò—Å—Ü–µ–ª–µ–Ω–∏–µ", "–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è"};
            String[] weapons = {"–º–µ—á–∞", "—Ç–æ–ø–æ—Ä–∞", "–ª—É–∫–∞", "–ø–æ—Å–æ—Ö–∞", "–∫–∏–Ω–∂–∞–ª–∞"};
            return type.getSimpleName().contains("Spell") ? spells[attempt % spells.length] : weapons[attempt % weapons.length];
        } else {
            return null;
        }
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("üéÆ –°–ò–ú–£–õ–Ø–¢–û–† –¢–†–ï–ù–ò–†–û–í–ö–ò –ì–ï–†–û–Ø üéÆ");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è: ");
        String heroName = scanner.nextLine();
        
        HeroTraining hero = new HeroTraining(heroName);
        startTraining(hero);
        
        scanner.close();
    }
}